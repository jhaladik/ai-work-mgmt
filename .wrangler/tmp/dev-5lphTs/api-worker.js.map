{
  "version": 3,
  "sources": ["../bundle-B7uNR5/checked-fetch.js", "wrangler-modules-watch:wrangler:modules-watch", "../../../../../../AppData/Roaming/npm/node_modules/wrangler/templates/modules-watch-stub.js", "../../../src/utils/auth-utils.js", "../../../src/utils/db-utils.js", "../../../src/workers/auth-worker.js", "../bundle-B7uNR5/middleware-loader.entry.ts", "../bundle-B7uNR5/middleware-insertion-facade.js", "../../../src/workers/api-worker.js", "../../../../../../AppData/Roaming/npm/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../../../../AppData/Roaming/npm/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../../../../../../AppData/Roaming/npm/node_modules/wrangler/templates/middleware/common.ts"],
  "sourceRoot": "C:\\Users\\jhala\\OneDrive\\APPS\\ai-work-mgmt\\.wrangler\\tmp\\dev-5lphTs",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "", "// `esbuild` doesn't support returning `watch*` options from `onStart()`\n// plugin callbacks. Instead, we define an empty virtual module that is\n// imported by this injected file. Importing the module registers watchers.\nimport \"wrangler:modules-watch\";\n", "// Auth utilities for AI Work Management System\r\n// JWT helpers, password hashing, and validation\r\n\r\n// JWT token creation and verification\r\nexport async function createJWT(payload, secret) {\r\n    const header = { alg: 'HS256', typ: 'JWT' };\r\n    \r\n    const encodedHeader = btoa(JSON.stringify(header));\r\n    const encodedPayload = btoa(JSON.stringify({\r\n      ...payload,\r\n      iat: Math.floor(Date.now() / 1000),\r\n      exp: Math.floor(Date.now() / 1000) + (24 * 60 * 60) // 24 hours\r\n    }));\r\n    \r\n    const data = `${encodedHeader}.${encodedPayload}`;\r\n    \r\n    const key = await crypto.subtle.importKey(\r\n      'raw',\r\n      new TextEncoder().encode(secret),\r\n      { name: 'HMAC', hash: 'SHA-256' },\r\n      false,\r\n      ['sign']\r\n    );\r\n    \r\n    const signature = await crypto.subtle.sign('HMAC', key, new TextEncoder().encode(data));\r\n    const encodedSignature = btoa(String.fromCharCode(...new Uint8Array(signature)));\r\n    \r\n    return `${data}.${encodedSignature}`;\r\n  }\r\n  \r\n  export async function verifyJWT(token, secret) {\r\n    try {\r\n      const [header, payload, signature] = token.split('.');\r\n      \r\n      if (!header || !payload || !signature) {\r\n        throw new Error('Invalid token format');\r\n      }\r\n      \r\n      const data = `${header}.${payload}`;\r\n      \r\n      const key = await crypto.subtle.importKey(\r\n        'raw',\r\n        new TextEncoder().encode(secret),\r\n        { name: 'HMAC', hash: 'SHA-256' },\r\n        false,\r\n        ['verify']\r\n      );\r\n      \r\n      const signatureBuffer = Uint8Array.from(atob(signature), c => c.charCodeAt(0));\r\n      const isValid = await crypto.subtle.verify('HMAC', key, signatureBuffer, new TextEncoder().encode(data));\r\n      \r\n      if (!isValid) {\r\n        throw new Error('Invalid signature');\r\n      }\r\n      \r\n      const decodedPayload = JSON.parse(atob(payload));\r\n      \r\n      // Check expiration\r\n      if (decodedPayload.exp < Math.floor(Date.now() / 1000)) {\r\n        throw new Error('Token expired');\r\n      }\r\n      \r\n      return decodedPayload;\r\n    } catch (error) {\r\n      throw new Error(`Token verification failed: ${error.message}`);\r\n    }\r\n  }\r\n  \r\n  // Password hashing and verification\r\n  export async function hashPassword(password) {\r\n    const encoder = new TextEncoder();\r\n    const data = encoder.encode(password + 'salt_for_security');\r\n    const hash = await crypto.subtle.digest('SHA-256', data);\r\n    return btoa(String.fromCharCode(...new Uint8Array(hash)));\r\n  }\r\n  \r\n  export async function verifyPassword(password, hash) {\r\n    const hashedInput = await hashPassword(password);\r\n    return hashedInput === hash;\r\n  }\r\n  \r\n  // Input validation\r\n  export function isValidEmail(email) {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return emailRegex.test(email) && email.length <= 255;\r\n  }\r\n  \r\n  export function isValidPassword(password) {\r\n    return password && \r\n           password.length >= 8 && \r\n           password.length <= 128 &&\r\n           /[A-Z]/.test(password) && \r\n           /[a-z]/.test(password) &&\r\n           /[0-9]/.test(password);\r\n  }\r\n  \r\n  export function isValidRole(role) {\r\n    return ['ceo', 'manager', 'employee'].includes(role);\r\n  }\r\n  \r\n  export function isValidName(name) {\r\n    return name && name.length >= 2 && name.length <= 100 && /^[a-zA-Z\\s]+$/.test(name);\r\n  }\r\n  \r\n  // User authentication middleware\r\n  export async function authenticateRequest(request, env) {\r\n    try {\r\n      const authHeader = request.headers.get('Authorization');\r\n      if (!authHeader || !authHeader.startsWith('Bearer ')) {\r\n        return null;\r\n      }\r\n      \r\n      const token = authHeader.replace('Bearer ', '');\r\n      const payload = await verifyJWT(token, env.JWT_SECRET);\r\n      \r\n      // Add user info to request for convenience\r\n      return {\r\n        userId: payload.userId,\r\n        role: payload.role,\r\n        organizationId: payload.organizationId,\r\n        email: payload.email\r\n      };\r\n    } catch (error) {\r\n      console.error('Authentication failed:', error.message);\r\n      return null;\r\n    }\r\n  }\r\n  \r\n  // GDPR consent recording\r\n  export async function recordGDPRConsent(userId, consentType, granted, request, env) {\r\n    const ipAddress = request.headers.get('CF-Connecting-IP') || 'unknown';\r\n    const userAgent = request.headers.get('User-Agent') || 'unknown';\r\n    \r\n    await env.DB.prepare(\r\n      'INSERT INTO gdpr_consents (id, user_id, consent_type, granted, ip_address, user_agent) VALUES (?, ?, ?, ?, ?, ?)'\r\n    ).bind(\r\n      crypto.randomUUID(),\r\n      userId,\r\n      consentType,\r\n      granted ? 1 : 0,\r\n      ipAddress,\r\n      userAgent\r\n    ).run();\r\n  }\r\n  \r\n  // Generate secure random token\r\n  export function generateSecureToken() {\r\n    const array = new Uint8Array(32);\r\n    crypto.getRandomValues(array);\r\n    return btoa(String.fromCharCode(...array)).replace(/[+/=]/g, '');\r\n  }\r\n  \r\n  // Rate limiting helper\r\n  export async function checkRateLimit(key, limit, window, env) {\r\n    const current = await env.SESSIONS.get(`rate_limit:${key}`);\r\n    const count = current ? parseInt(current) : 0;\r\n    \r\n    if (count >= limit) {\r\n      return false;\r\n    }\r\n    \r\n    await env.SESSIONS.put(`rate_limit:${key}`, (count + 1).toString(), {\r\n      expirationTtl: window\r\n    });\r\n    \r\n    return true;\r\n  }", "// Database utilities for AI Work Management System\r\n// Common D1 database operations and helpers\r\n\r\n// Error response helper\r\nexport function errorResponse(message, status = 400) {\r\n    return new Response(JSON.stringify({ error: message }), {\r\n      status,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n  \r\n  // Success response helper\r\n  export function successResponse(data, status = 200) {\r\n    return new Response(JSON.stringify(data), {\r\n      status,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n  \r\n  // User operations\r\n  export async function createUser(userData, env) {\r\n    const userId = crypto.randomUUID();\r\n    \r\n    try {\r\n      const result = await env.DB.prepare(\r\n        `INSERT INTO users (id, organization_id, email, password_hash, name, role, skills, capacity_hours_per_week) \r\n         VALUES (?, ?, ?, ?, ?, ?, ?, ?)`\r\n      ).bind(\r\n        userId,\r\n        userData.organizationId,\r\n        userData.email,\r\n        userData.passwordHash,\r\n        userData.name,\r\n        userData.role,\r\n        JSON.stringify(userData.skills || []),\r\n        userData.capacityHours || 40\r\n      ).run();\r\n      \r\n      return { success: true, userId, insertId: result.meta.last_row_id };\r\n    } catch (error) {\r\n      console.error('User creation failed:', error);\r\n      throw new Error('Failed to create user');\r\n    }\r\n  }\r\n  \r\n  export async function getUserByEmail(email, env) {\r\n    try {\r\n      const user = await env.DB.prepare(\r\n        'SELECT * FROM users WHERE email = ? AND is_active = 1'\r\n      ).bind(email).first();\r\n      \r\n      if (user && user.skills) {\r\n        user.skills = JSON.parse(user.skills);\r\n      }\r\n      \r\n      return user;\r\n    } catch (error) {\r\n      console.error('Get user by email failed:', error);\r\n      return null;\r\n    }\r\n  }\r\n  \r\n  export async function getUserById(userId, env) {\r\n    try {\r\n      const user = await env.DB.prepare(\r\n        'SELECT * FROM users WHERE id = ? AND is_active = 1'\r\n      ).bind(userId).first();\r\n      \r\n      if (user && user.skills) {\r\n        user.skills = JSON.parse(user.skills);\r\n      }\r\n      \r\n      return user;\r\n    } catch (error) {\r\n      console.error('Get user by ID failed:', error);\r\n      return null;\r\n    }\r\n  }\r\n  \r\n  export async function updateUserLastLogin(userId, env) {\r\n    try {\r\n      await env.DB.prepare(\r\n        'UPDATE users SET last_login = ? WHERE id = ?'\r\n      ).bind(Date.now(), userId).run();\r\n    } catch (error) {\r\n      console.error('Update last login failed:', error);\r\n    }\r\n  }\r\n  \r\n  // Organization operations\r\n  export async function createOrganization(orgData, env) {\r\n    const orgId = crypto.randomUUID();\r\n    \r\n    try {\r\n      await env.DB.prepare(\r\n        'INSERT INTO organizations (id, name, settings) VALUES (?, ?, ?)'\r\n      ).bind(\r\n        orgId,\r\n        orgData.name,\r\n        JSON.stringify(orgData.settings || {})\r\n      ).run();\r\n      \r\n      return { success: true, organizationId: orgId };\r\n    } catch (error) {\r\n      console.error('Organization creation failed:', error);\r\n      throw new Error('Failed to create organization');\r\n    }\r\n  }\r\n  \r\n  export async function getOrganizationById(orgId, env) {\r\n    try {\r\n      const org = await env.DB.prepare(\r\n        'SELECT * FROM organizations WHERE id = ?'\r\n      ).bind(orgId).first();\r\n      \r\n      if (org && org.settings) {\r\n        org.settings = JSON.parse(org.settings);\r\n      }\r\n      \r\n      return org;\r\n    } catch (error) {\r\n      console.error('Get organization failed:', error);\r\n      return null;\r\n    }\r\n  }\r\n  \r\n  // Session management\r\n  export async function createSession(userId, deviceInfo, request, env) {\r\n    const sessionId = crypto.randomUUID();\r\n    const sessionToken = crypto.randomUUID();\r\n    const expiresAt = Date.now() + (7 * 24 * 60 * 60 * 1000); // 7 days\r\n    \r\n    try {\r\n      await env.DB.prepare(\r\n        `INSERT INTO user_sessions (id, user_id, session_token, device_info, ip_address, expires_at) \r\n         VALUES (?, ?, ?, ?, ?, ?)`\r\n      ).bind(\r\n        sessionId,\r\n        userId,\r\n        sessionToken,\r\n        deviceInfo,\r\n        request.headers.get('CF-Connecting-IP') || 'unknown',\r\n        expiresAt\r\n      ).run();\r\n      \r\n      return { sessionId, sessionToken };\r\n    } catch (error) {\r\n      console.error('Session creation failed:', error);\r\n      return null;\r\n    }\r\n  }\r\n  \r\n  export async function validateSession(sessionToken, env) {\r\n    try {\r\n      const session = await env.DB.prepare(\r\n        `SELECT s.*, u.id as user_id, u.role, u.organization_id \r\n         FROM user_sessions s \r\n         JOIN users u ON s.user_id = u.id \r\n         WHERE s.session_token = ? AND s.expires_at > ? AND u.is_active = 1`\r\n      ).bind(sessionToken, Date.now()).first();\r\n      \r\n      if (session) {\r\n        // Update last activity\r\n        await env.DB.prepare(\r\n          'UPDATE user_sessions SET last_activity = ? WHERE id = ?'\r\n        ).bind(Date.now(), session.id).run();\r\n      }\r\n      \r\n      return session;\r\n    } catch (error) {\r\n      console.error('Session validation failed:', error);\r\n      return null;\r\n    }\r\n  }\r\n  \r\n  // Audit logging\r\n  export async function logAuditEvent(eventData, request, env) {\r\n    try {\r\n      await env.DB.prepare(\r\n        `INSERT INTO audit_logs (id, user_id, organization_id, action, resource_type, resource_id, metadata, ip_address, user_agent) \r\n         VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`\r\n      ).bind(\r\n        crypto.randomUUID(),\r\n        eventData.userId,\r\n        eventData.organizationId,\r\n        eventData.action,\r\n        eventData.resourceType,\r\n        eventData.resourceId,\r\n        JSON.stringify(eventData.metadata || {}),\r\n        request.headers.get('CF-Connecting-IP') || 'unknown',\r\n        request.headers.get('User-Agent') || 'unknown'\r\n      ).run();\r\n    } catch (error) {\r\n      console.error('Audit logging failed:', error);\r\n    }\r\n  }\r\n  \r\n  // Database health check\r\n  export async function healthCheck(env) {\r\n    try {\r\n      const result = await env.DB.prepare('SELECT 1 as health').first();\r\n      return result && result.health === 1;\r\n    } catch (error) {\r\n      console.error('Database health check failed:', error);\r\n      return false;\r\n    }\r\n  }\r\n  \r\n  // Clean up expired sessions\r\n  export async function cleanupExpiredSessions(env) {\r\n    try {\r\n      const result = await env.DB.prepare(\r\n        'DELETE FROM user_sessions WHERE expires_at < ?'\r\n      ).bind(Date.now()).run();\r\n      \r\n      console.log(`Cleaned up ${result.meta.changes} expired sessions`);\r\n      return result.meta.changes;\r\n    } catch (error) {\r\n      console.error('Session cleanup failed:', error);\r\n      return 0;\r\n    }\r\n  }", "// Main API Worker for AI Work Management System\r\n// Routes requests to appropriate handlers and provides middleware\r\n\r\nimport { authenticateRequest } from '../utils/auth-utils.js';\r\nimport { errorResponse, successResponse, healthCheck } from '../utils/db-utils.js';\r\n\r\nexport default {\r\n  async fetch(request, env, ctx) {\r\n    const url = new URL(request.url);\r\n    const method = request.method;\r\n    \r\n    // CORS handling for all requests\r\n    if (method === 'OPTIONS') {\r\n      return new Response(null, {\r\n        headers: {\r\n          'Access-Control-Allow-Origin': '*',\r\n          'Access-Control-Allow-Methods': 'GET,POST,PUT,DELETE,PATCH',\r\n          'Access-Control-Allow-Headers': 'Content-Type,Authorization,X-Requested-With',\r\n          'Access-Control-Max-Age': '86400'\r\n        }\r\n      });\r\n    }\r\n    \r\n    // Add CORS headers to all responses\r\n    const corsHeaders = {\r\n      'Access-Control-Allow-Origin': '*',\r\n      'Access-Control-Allow-Methods': 'GET,POST,PUT,DELETE,PATCH',\r\n      'Access-Control-Allow-Headers': 'Content-Type,Authorization,X-Requested-With'\r\n    };\r\n    \r\n    try {\r\n      // Health check endpoint\r\n      if (url.pathname === '/api/health') {\r\n        return handleHealthCheck(env, corsHeaders);\r\n      }\r\n      \r\n      // Authentication routes\r\n      if (url.pathname.startsWith('/api/auth/')) {\r\n        return routeAuthRequest(request, env, ctx, corsHeaders);\r\n      }\r\n      \r\n      // Protected routes require authentication\r\n      const user = await authenticateRequest(request, env);\r\n      if (!user && !isPublicRoute(url.pathname)) {\r\n        return new Response(JSON.stringify({ error: 'Authentication required' }), {\r\n          status: 401,\r\n          headers: { 'Content-Type': 'application/json', ...corsHeaders }\r\n        });\r\n      }\r\n      \r\n      // Attach user to request for convenience\r\n      request.user = user;\r\n      \r\n      // Route to appropriate handlers\r\n      if (url.pathname.startsWith('/api/organizations/')) {\r\n        return routeOrganizationRequest(request, env, ctx, corsHeaders);\r\n      }\r\n      \r\n      if (url.pathname.startsWith('/api/users/')) {\r\n        return routeUserRequest(request, env, ctx, corsHeaders);\r\n      }\r\n      \r\n      // Default 404 for unmatched routes\r\n      return new Response(JSON.stringify({ error: 'Endpoint not found' }), {\r\n        status: 404,\r\n        headers: { 'Content-Type': 'application/json', ...corsHeaders }\r\n      });\r\n      \r\n    } catch (error) {\r\n      console.error('API Worker error:', error);\r\n      return new Response(JSON.stringify({ \r\n        error: 'Internal server error',\r\n        message: env.ENVIRONMENT === 'development' ? error.message : undefined\r\n      }), {\r\n        status: 500,\r\n        headers: { 'Content-Type': 'application/json', ...corsHeaders }\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\nasync function handleHealthCheck(env, corsHeaders) {\r\n  try {\r\n    const dbHealthy = await healthCheck(env);\r\n    const status = dbHealthy ? 200 : 503;\r\n    \r\n    const healthData = {\r\n      status: dbHealthy ? 'healthy' : 'unhealthy',\r\n      timestamp: new Date().toISOString(),\r\n      services: {\r\n        database: dbHealthy ? 'up' : 'down',\r\n        kv: 'up', // KV is always available in Workers\r\n        worker: 'up'\r\n      }\r\n    };\r\n    \r\n    return new Response(JSON.stringify(healthData), {\r\n      status,\r\n      headers: { 'Content-Type': 'application/json', ...corsHeaders }\r\n    });\r\n  } catch (error) {\r\n    return new Response(JSON.stringify({\r\n      status: 'error',\r\n      error: error.message\r\n    }), {\r\n      status: 503,\r\n      headers: { 'Content-Type': 'application/json', ...corsHeaders }\r\n    });\r\n  }\r\n}\r\n\r\nasync function routeAuthRequest(request, env, ctx, corsHeaders) {\r\n  // Import auth worker (in real deployment, this would be a separate worker)\r\n  try {\r\n    const authWorkerModule = await import('./auth-worker.js');\r\n    const response = await authWorkerModule.default.fetch(request, env, ctx);\r\n    \r\n    // Add CORS headers to auth responses\r\n    const responseHeaders = new Headers(response.headers);\r\n    Object.entries(corsHeaders).forEach(([key, value]) => {\r\n      responseHeaders.set(key, value);\r\n    });\r\n    \r\n    return new Response(response.body, {\r\n      status: response.status,\r\n      headers: responseHeaders\r\n    });\r\n  } catch (error) {\r\n    console.error('Auth routing error:', error);\r\n    return new Response(JSON.stringify({ error: 'Authentication service unavailable' }), {\r\n      status: 503,\r\n      headers: { 'Content-Type': 'application/json', ...corsHeaders }\r\n    });\r\n  }\r\n}\r\n\r\nasync function routeOrganizationRequest(request, env, ctx, corsHeaders) {\r\n  const url = new URL(request.url);\r\n  const user = request.user;\r\n  \r\n  // Only CEOs and managers can access organization endpoints\r\n  if (user.role === 'employee') {\r\n    return new Response(JSON.stringify({ error: 'Insufficient permissions' }), {\r\n      status: 403,\r\n      headers: { 'Content-Type': 'application/json', ...corsHeaders }\r\n    });\r\n  }\r\n  \r\n  try {\r\n    if (url.pathname === '/api/organizations/current' && request.method === 'GET') {\r\n      return getCurrentOrganization(user, env, corsHeaders);\r\n    }\r\n    \r\n    if (url.pathname === '/api/organizations/users' && request.method === 'GET') {\r\n      return getOrganizationUsers(user, env, corsHeaders);\r\n    }\r\n    \r\n    return new Response(JSON.stringify({ error: 'Organization endpoint not found' }), {\r\n      status: 404,\r\n      headers: { 'Content-Type': 'application/json', ...corsHeaders }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Organization routing error:', error);\r\n    return new Response(JSON.stringify({ error: 'Organization service error' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json', ...corsHeaders }\r\n    });\r\n  }\r\n}\r\n\r\nasync function routeUserRequest(request, env, ctx, corsHeaders) {\r\n  const url = new URL(request.url);\r\n  const user = request.user;\r\n  \r\n  try {\r\n    if (url.pathname === '/api/users/me' && request.method === 'GET') {\r\n      return getUserProfile(user, env, corsHeaders);\r\n    }\r\n    \r\n    if (url.pathname === '/api/users/me' && request.method === 'PUT') {\r\n      return updateUserProfile(request, user, env, corsHeaders);\r\n    }\r\n    \r\n    return new Response(JSON.stringify({ error: 'User endpoint not found' }), {\r\n      status: 404,\r\n      headers: { 'Content-Type': 'application/json', ...corsHeaders }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('User routing error:', error);\r\n    return new Response(JSON.stringify({ error: 'User service error' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json', ...corsHeaders }\r\n    });\r\n  }\r\n}\r\n\r\nasync function getCurrentOrganization(user, env, corsHeaders) {\r\n  try {\r\n    const org = await env.DB.prepare(\r\n      'SELECT id, name, settings, created_at FROM organizations WHERE id = ?'\r\n    ).bind(user.organizationId).first();\r\n    \r\n    if (!org) {\r\n      return new Response(JSON.stringify({ error: 'Organization not found' }), {\r\n        status: 404,\r\n        headers: { 'Content-Type': 'application/json', ...corsHeaders }\r\n      });\r\n    }\r\n    \r\n    const userCount = await env.DB.prepare(\r\n      'SELECT COUNT(*) as count FROM users WHERE organization_id = ? AND is_active = 1'\r\n    ).bind(user.organizationId).first();\r\n    \r\n    return new Response(JSON.stringify({\r\n      id: org.id,\r\n      name: org.name,\r\n      settings: JSON.parse(org.settings || '{}'),\r\n      userCount: userCount.count,\r\n      createdAt: org.created_at\r\n    }), {\r\n      headers: { 'Content-Type': 'application/json', ...corsHeaders }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Get organization error:', error);\r\n    return new Response(JSON.stringify({ error: 'Failed to get organization' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json', ...corsHeaders }\r\n    });\r\n  }\r\n}\r\n\r\nasync function getOrganizationUsers(user, env, corsHeaders) {\r\n  try {\r\n    const users = await env.DB.prepare(\r\n      `SELECT id, email, name, role, skills, capacity_hours_per_week, \r\n              calendar_connected, last_login, created_at \r\n       FROM users \r\n       WHERE organization_id = ? AND is_active = 1\r\n       ORDER BY created_at DESC`\r\n    ).bind(user.organizationId).all();\r\n    \r\n    const usersWithSkills = users.results.map(u => ({\r\n      ...u,\r\n      skills: JSON.parse(u.skills || '[]'),\r\n      calendarConnected: u.calendar_connected === 1\r\n    }));\r\n    \r\n    return new Response(JSON.stringify({\r\n      users: usersWithSkills,\r\n      total: usersWithSkills.length\r\n    }), {\r\n      headers: { 'Content-Type': 'application/json', ...corsHeaders }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Get organization users error:', error);\r\n    return new Response(JSON.stringify({ error: 'Failed to get users' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json', ...corsHeaders }\r\n    });\r\n  }\r\n}\r\n\r\nasync function getUserProfile(user, env, corsHeaders) {\r\n  try {\r\n    const userData = await env.DB.prepare(\r\n      `SELECT id, email, name, role, skills, capacity_hours_per_week, \r\n              calendar_connected, calendar_provider, last_login, created_at\r\n       FROM users WHERE id = ?`\r\n    ).bind(user.userId).first();\r\n    \r\n    if (!userData) {\r\n      return new Response(JSON.stringify({ error: 'User not found' }), {\r\n        status: 404,\r\n        headers: { 'Content-Type': 'application/json', ...corsHeaders }\r\n      });\r\n    }\r\n    \r\n    return new Response(JSON.stringify({\r\n      id: userData.id,\r\n      email: userData.email,\r\n      name: userData.name,\r\n      role: userData.role,\r\n      skills: JSON.parse(userData.skills || '[]'),\r\n      capacityHours: userData.capacity_hours_per_week,\r\n      calendarConnected: userData.calendar_connected === 1,\r\n      calendarProvider: userData.calendar_provider,\r\n      lastLogin: userData.last_login,\r\n      createdAt: userData.created_at\r\n    }), {\r\n      headers: { 'Content-Type': 'application/json', ...corsHeaders }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Get user profile error:', error);\r\n    return new Response(JSON.stringify({ error: 'Failed to get profile' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json', ...corsHeaders }\r\n    });\r\n  }\r\n}\r\n\r\nasync function updateUserProfile(request, user, env, corsHeaders) {\r\n  try {\r\n    const { name, skills, capacityHours } = await request.json();\r\n    \r\n    // Validate input\r\n    if (name && (name.length < 2 || name.length > 100)) {\r\n      return new Response(JSON.stringify({ error: 'Name must be 2-100 characters' }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json', ...corsHeaders }\r\n      });\r\n    }\r\n    \r\n    if (capacityHours && (capacityHours < 1 || capacityHours > 80)) {\r\n      return new Response(JSON.stringify({ error: 'Capacity hours must be 1-80' }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json', ...corsHeaders }\r\n      });\r\n    }\r\n    \r\n    // Update user\r\n    const updates = [];\r\n    const params = [];\r\n    \r\n    if (name) {\r\n      updates.push('name = ?');\r\n      params.push(name);\r\n    }\r\n    \r\n    if (skills) {\r\n      updates.push('skills = ?');\r\n      params.push(JSON.stringify(skills));\r\n    }\r\n    \r\n    if (capacityHours) {\r\n      updates.push('capacity_hours_per_week = ?');\r\n      params.push(capacityHours);\r\n    }\r\n    \r\n    updates.push('updated_at = ?');\r\n    params.push(Date.now());\r\n    params.push(user.userId);\r\n    \r\n    await env.DB.prepare(\r\n      `UPDATE users SET ${updates.join(', ')} WHERE id = ?`\r\n    ).bind(...params).run();\r\n    \r\n    return new Response(JSON.stringify({ message: 'Profile updated successfully' }), {\r\n      headers: { 'Content-Type': 'application/json', ...corsHeaders }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Update user profile error:', error);\r\n    return new Response(JSON.stringify({ error: 'Failed to update profile' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json', ...corsHeaders }\r\n    });\r\n  }\r\n}\r\n\r\nfunction isPublicRoute(pathname) {\r\n  const publicRoutes = [\r\n    '/api/health',\r\n    '/api/auth/register',\r\n    '/api/auth/login'\r\n  ];\r\n  \r\n  return publicRoutes.includes(pathname);\r\n}", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"C:\\\\Users\\\\jhala\\\\OneDrive\\\\APPS\\\\ai-work-mgmt\\\\.wrangler\\\\tmp\\\\bundle-B7uNR5\\\\middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"C:\\\\Users\\\\jhala\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\common.ts\";\nimport type { WorkerEntrypointConstructor } from \"C:\\\\Users\\\\jhala\\\\OneDrive\\\\APPS\\\\ai-work-mgmt\\\\.wrangler\\\\tmp\\\\bundle-B7uNR5\\\\middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"C:\\\\Users\\\\jhala\\\\OneDrive\\\\APPS\\\\ai-work-mgmt\\\\.wrangler\\\\tmp\\\\bundle-B7uNR5\\\\middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"C:\\\\Users\\\\jhala\\\\OneDrive\\\\APPS\\\\ai-work-mgmt\\\\src\\\\workers\\\\api-worker.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"C:\\\\Users\\\\jhala\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"C:\\\\Users\\\\jhala\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"C:\\\\Users\\\\jhala\\\\OneDrive\\\\APPS\\\\ai-work-mgmt\\\\src\\\\workers\\\\api-worker.js\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "// Main API Worker for AI Work Management System\r\n// Routes requests to appropriate handlers and provides middleware\r\n\r\nimport { authenticateRequest } from '../utils/auth-utils.js';\r\nimport { errorResponse, successResponse, healthCheck } from '../utils/db-utils.js';\r\n\r\nexport default {\r\n  async fetch(request, env, ctx) {\r\n    const url = new URL(request.url);\r\n    const method = request.method;\r\n    \r\n    // CORS handling for all requests\r\n    if (method === 'OPTIONS') {\r\n      return new Response(null, {\r\n        headers: {\r\n          'Access-Control-Allow-Origin': '*',\r\n          'Access-Control-Allow-Methods': 'GET,POST,PUT,DELETE,PATCH',\r\n          'Access-Control-Allow-Headers': 'Content-Type,Authorization,X-Requested-With',\r\n          'Access-Control-Max-Age': '86400'\r\n        }\r\n      });\r\n    }\r\n    \r\n    // Add CORS headers to all responses\r\n    const corsHeaders = {\r\n      'Access-Control-Allow-Origin': '*',\r\n      'Access-Control-Allow-Methods': 'GET,POST,PUT,DELETE,PATCH',\r\n      'Access-Control-Allow-Headers': 'Content-Type,Authorization,X-Requested-With'\r\n    };\r\n    \r\n    try {\r\n      // Health check endpoint\r\n      if (url.pathname === '/api/health') {\r\n        return handleHealthCheck(env, corsHeaders);\r\n      }\r\n      \r\n      // Authentication routes\r\n      if (url.pathname.startsWith('/api/auth/')) {\r\n        return routeAuthRequest(request, env, ctx, corsHeaders);\r\n      }\r\n      \r\n      // Protected routes require authentication\r\n      const user = await authenticateRequest(request, env);\r\n      if (!user && !isPublicRoute(url.pathname)) {\r\n        return new Response(JSON.stringify({ error: 'Authentication required' }), {\r\n          status: 401,\r\n          headers: { 'Content-Type': 'application/json', ...corsHeaders }\r\n        });\r\n      }\r\n      \r\n      // Attach user to request for convenience\r\n      request.user = user;\r\n      \r\n      // Route to appropriate handlers\r\n      if (url.pathname.startsWith('/api/organizations/')) {\r\n        return routeOrganizationRequest(request, env, ctx, corsHeaders);\r\n      }\r\n      \r\n      if (url.pathname.startsWith('/api/users/')) {\r\n        return routeUserRequest(request, env, ctx, corsHeaders);\r\n      }\r\n      \r\n      // Default 404 for unmatched routes\r\n      return new Response(JSON.stringify({ error: 'Endpoint not found' }), {\r\n        status: 404,\r\n        headers: { 'Content-Type': 'application/json', ...corsHeaders }\r\n      });\r\n      \r\n    } catch (error) {\r\n      console.error('API Worker error:', error);\r\n      return new Response(JSON.stringify({ \r\n        error: 'Internal server error',\r\n        message: env.ENVIRONMENT === 'development' ? error.message : undefined\r\n      }), {\r\n        status: 500,\r\n        headers: { 'Content-Type': 'application/json', ...corsHeaders }\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\nasync function handleHealthCheck(env, corsHeaders) {\r\n  try {\r\n    const dbHealthy = await healthCheck(env);\r\n    const status = dbHealthy ? 200 : 503;\r\n    \r\n    const healthData = {\r\n      status: dbHealthy ? 'healthy' : 'unhealthy',\r\n      timestamp: new Date().toISOString(),\r\n      services: {\r\n        database: dbHealthy ? 'up' : 'down',\r\n        kv: 'up', // KV is always available in Workers\r\n        worker: 'up'\r\n      }\r\n    };\r\n    \r\n    return new Response(JSON.stringify(healthData), {\r\n      status,\r\n      headers: { 'Content-Type': 'application/json', ...corsHeaders }\r\n    });\r\n  } catch (error) {\r\n    return new Response(JSON.stringify({\r\n      status: 'error',\r\n      error: error.message\r\n    }), {\r\n      status: 503,\r\n      headers: { 'Content-Type': 'application/json', ...corsHeaders }\r\n    });\r\n  }\r\n}\r\n\r\nasync function routeAuthRequest(request, env, ctx, corsHeaders) {\r\n  // Import auth worker (in real deployment, this would be a separate worker)\r\n  try {\r\n    const authWorkerModule = await import('./auth-worker.js');\r\n    const response = await authWorkerModule.default.fetch(request, env, ctx);\r\n    \r\n    // Add CORS headers to auth responses\r\n    const responseHeaders = new Headers(response.headers);\r\n    Object.entries(corsHeaders).forEach(([key, value]) => {\r\n      responseHeaders.set(key, value);\r\n    });\r\n    \r\n    return new Response(response.body, {\r\n      status: response.status,\r\n      headers: responseHeaders\r\n    });\r\n  } catch (error) {\r\n    console.error('Auth routing error:', error);\r\n    return new Response(JSON.stringify({ error: 'Authentication service unavailable' }), {\r\n      status: 503,\r\n      headers: { 'Content-Type': 'application/json', ...corsHeaders }\r\n    });\r\n  }\r\n}\r\n\r\nasync function routeOrganizationRequest(request, env, ctx, corsHeaders) {\r\n  const url = new URL(request.url);\r\n  const user = request.user;\r\n  \r\n  // Only CEOs and managers can access organization endpoints\r\n  if (user.role === 'employee') {\r\n    return new Response(JSON.stringify({ error: 'Insufficient permissions' }), {\r\n      status: 403,\r\n      headers: { 'Content-Type': 'application/json', ...corsHeaders }\r\n    });\r\n  }\r\n  \r\n  try {\r\n    if (url.pathname === '/api/organizations/current' && request.method === 'GET') {\r\n      return getCurrentOrganization(user, env, corsHeaders);\r\n    }\r\n    \r\n    if (url.pathname === '/api/organizations/users' && request.method === 'GET') {\r\n      return getOrganizationUsers(user, env, corsHeaders);\r\n    }\r\n    \r\n    return new Response(JSON.stringify({ error: 'Organization endpoint not found' }), {\r\n      status: 404,\r\n      headers: { 'Content-Type': 'application/json', ...corsHeaders }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Organization routing error:', error);\r\n    return new Response(JSON.stringify({ error: 'Organization service error' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json', ...corsHeaders }\r\n    });\r\n  }\r\n}\r\n\r\nasync function routeUserRequest(request, env, ctx, corsHeaders) {\r\n  const url = new URL(request.url);\r\n  const user = request.user;\r\n  \r\n  try {\r\n    if (url.pathname === '/api/users/me' && request.method === 'GET') {\r\n      return getUserProfile(user, env, corsHeaders);\r\n    }\r\n    \r\n    if (url.pathname === '/api/users/me' && request.method === 'PUT') {\r\n      return updateUserProfile(request, user, env, corsHeaders);\r\n    }\r\n    \r\n    return new Response(JSON.stringify({ error: 'User endpoint not found' }), {\r\n      status: 404,\r\n      headers: { 'Content-Type': 'application/json', ...corsHeaders }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('User routing error:', error);\r\n    return new Response(JSON.stringify({ error: 'User service error' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json', ...corsHeaders }\r\n    });\r\n  }\r\n}\r\n\r\nasync function getCurrentOrganization(user, env, corsHeaders) {\r\n  try {\r\n    const org = await env.DB.prepare(\r\n      'SELECT id, name, settings, created_at FROM organizations WHERE id = ?'\r\n    ).bind(user.organizationId).first();\r\n    \r\n    if (!org) {\r\n      return new Response(JSON.stringify({ error: 'Organization not found' }), {\r\n        status: 404,\r\n        headers: { 'Content-Type': 'application/json', ...corsHeaders }\r\n      });\r\n    }\r\n    \r\n    const userCount = await env.DB.prepare(\r\n      'SELECT COUNT(*) as count FROM users WHERE organization_id = ? AND is_active = 1'\r\n    ).bind(user.organizationId).first();\r\n    \r\n    return new Response(JSON.stringify({\r\n      id: org.id,\r\n      name: org.name,\r\n      settings: JSON.parse(org.settings || '{}'),\r\n      userCount: userCount.count,\r\n      createdAt: org.created_at\r\n    }), {\r\n      headers: { 'Content-Type': 'application/json', ...corsHeaders }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Get organization error:', error);\r\n    return new Response(JSON.stringify({ error: 'Failed to get organization' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json', ...corsHeaders }\r\n    });\r\n  }\r\n}\r\n\r\nasync function getOrganizationUsers(user, env, corsHeaders) {\r\n  try {\r\n    const users = await env.DB.prepare(\r\n      `SELECT id, email, name, role, skills, capacity_hours_per_week, \r\n              calendar_connected, last_login, created_at \r\n       FROM users \r\n       WHERE organization_id = ? AND is_active = 1\r\n       ORDER BY created_at DESC`\r\n    ).bind(user.organizationId).all();\r\n    \r\n    const usersWithSkills = users.results.map(u => ({\r\n      ...u,\r\n      skills: JSON.parse(u.skills || '[]'),\r\n      calendarConnected: u.calendar_connected === 1\r\n    }));\r\n    \r\n    return new Response(JSON.stringify({\r\n      users: usersWithSkills,\r\n      total: usersWithSkills.length\r\n    }), {\r\n      headers: { 'Content-Type': 'application/json', ...corsHeaders }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Get organization users error:', error);\r\n    return new Response(JSON.stringify({ error: 'Failed to get users' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json', ...corsHeaders }\r\n    });\r\n  }\r\n}\r\n\r\nasync function getUserProfile(user, env, corsHeaders) {\r\n  try {\r\n    const userData = await env.DB.prepare(\r\n      `SELECT id, email, name, role, skills, capacity_hours_per_week, \r\n              calendar_connected, calendar_provider, last_login, created_at\r\n       FROM users WHERE id = ?`\r\n    ).bind(user.userId).first();\r\n    \r\n    if (!userData) {\r\n      return new Response(JSON.stringify({ error: 'User not found' }), {\r\n        status: 404,\r\n        headers: { 'Content-Type': 'application/json', ...corsHeaders }\r\n      });\r\n    }\r\n    \r\n    return new Response(JSON.stringify({\r\n      id: userData.id,\r\n      email: userData.email,\r\n      name: userData.name,\r\n      role: userData.role,\r\n      skills: JSON.parse(userData.skills || '[]'),\r\n      capacityHours: userData.capacity_hours_per_week,\r\n      calendarConnected: userData.calendar_connected === 1,\r\n      calendarProvider: userData.calendar_provider,\r\n      lastLogin: userData.last_login,\r\n      createdAt: userData.created_at\r\n    }), {\r\n      headers: { 'Content-Type': 'application/json', ...corsHeaders }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Get user profile error:', error);\r\n    return new Response(JSON.stringify({ error: 'Failed to get profile' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json', ...corsHeaders }\r\n    });\r\n  }\r\n}\r\n\r\nasync function updateUserProfile(request, user, env, corsHeaders) {\r\n  try {\r\n    const { name, skills, capacityHours } = await request.json();\r\n    \r\n    // Validate input\r\n    if (name && (name.length < 2 || name.length > 100)) {\r\n      return new Response(JSON.stringify({ error: 'Name must be 2-100 characters' }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json', ...corsHeaders }\r\n      });\r\n    }\r\n    \r\n    if (capacityHours && (capacityHours < 1 || capacityHours > 80)) {\r\n      return new Response(JSON.stringify({ error: 'Capacity hours must be 1-80' }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json', ...corsHeaders }\r\n      });\r\n    }\r\n    \r\n    // Update user\r\n    const updates = [];\r\n    const params = [];\r\n    \r\n    if (name) {\r\n      updates.push('name = ?');\r\n      params.push(name);\r\n    }\r\n    \r\n    if (skills) {\r\n      updates.push('skills = ?');\r\n      params.push(JSON.stringify(skills));\r\n    }\r\n    \r\n    if (capacityHours) {\r\n      updates.push('capacity_hours_per_week = ?');\r\n      params.push(capacityHours);\r\n    }\r\n    \r\n    updates.push('updated_at = ?');\r\n    params.push(Date.now());\r\n    params.push(user.userId);\r\n    \r\n    await env.DB.prepare(\r\n      `UPDATE users SET ${updates.join(', ')} WHERE id = ?`\r\n    ).bind(...params).run();\r\n    \r\n    return new Response(JSON.stringify({ message: 'Profile updated successfully' }), {\r\n      headers: { 'Content-Type': 'application/json', ...corsHeaders }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Update user profile error:', error);\r\n    return new Response(JSON.stringify({ error: 'Failed to update profile' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json', ...corsHeaders }\r\n    });\r\n  }\r\n}\r\n\r\nfunction isPublicRoute(pathname) {\r\n  const publicRoutes = [\r\n    '/api/health',\r\n    '/api/auth/register',\r\n    '/api/auth/login'\r\n  ];\r\n  \r\n  return publicRoutes.includes(pathname);\r\n}", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n"],
  "mappings": "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",
  "names": ["handleHealthCheck", "routeAuthRequest", "isPublicRoute", "routeOrganizationRequest", "routeUserRequest", "getCurrentOrganization", "getOrganizationUsers", "getUserProfile", "updateUserProfile"]
}
